# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17cLBFfmFlsHQCwhlZntl5edK-Jx9i6Vi
"""

class Validacao:
    def _init_(self, nome, idade, sexo, numero_da_chamada, serie, ano_colegio, cidade, estado, pais):
        self.nome = nome
        self.idade = idade
        self.sexo = sexo
        self.numero_da_chamada = numero_da_chamada
        self.serie = serie
        self.ano_colegio = ano_colegio
        self.cidade = cidade
        self.estado = estado
        self.pais = pais

    def eh_positivo(numero):
        return numero > 0

    def classifica_numero(numero):
        if numero > 0:
            return "positivo"
        elif numero < 0:
            return "negativo"
        else:
            return "zero"

    def eh_par_ou_impar(numero):
        if numero % 2 == 0:
            return "par"
        else:
            return "ímpar"

    def eh_primo(numero):
        if numero <= 1:
            return False
        for i in range(2, int(numero**0.5) + 1):
            if numero % i == 0:
                return False
        return True

    def valida_idade(idade):
        return 0 <= idade <= 100

    def classifica_idade(nome, idade):
        if idade < 1:
            return f"{nome} é um bebê"
        elif 1 <= idade <= 12:
            return f"{nome} é uma criança"
        elif 13 <= idade <= 17:
            return f"{nome} é um adolescente"
        elif 18 <= idade <= 59:
            return f"{nome} é um adulto"
        else:
            return f"{nome} é um idoso"

    def valida_comprimento_minimo(string):
        return len(string) >= 5

    def quantidade_caracteres_string(string):
        return len(string)

    def quantidade_elementos_array(array):
        return len(array)

    def verifica_intervalo(numero, inicio, fim):
        return inicio <= numero <= fim


objeto_validacao = Validacao("Maria", 18, "Feminino", 7, "3º", 2024, "Cruzeiro do Oeste", "PR", "Brasil")

print(eh_positivo(5))
print(classifica_numero(-3))
print(eh_par_ou_impar(7))
print(eh_primo(11))
print(valida_idade(25))
print(classifica_idade("Maria", 5))
print(valida_comprimento_minimo("Python"))
print(quantidade_caracteres_string("Olá, tudo bem"))
print(quantidade_elementos_array([1, 2, 3, 4, 5]))
print(verifica_intervalo(25, 10, 50))


class Funcionario:
    def _init_(self, nome, salario):
        self.nome = nome
        self.salario = salario

    def aumentar_salario(self, percentual):
        aumento = self.salario * percentual / 100
        self.salario += aumento

class Gerente(Funcionario):
    def _init_(self, nome, salario, departamento):
        super()._init_(nome, salario)
        self.departamento = departamento

    def relatorio(self):
        print(f"Gerente {self.nome} trabalha no departamento {self.departamento} e tem salário de R${self.salario:.2f}")


funcionario1 = Funcionario("Jorge", 3000.0)
print(f"Funcionário {funcionario1.nome} tem salário inicial de R${funcionario1.salario:.2f}")
funcionario1.aumentar_salario(10)
print(f"Após aumento, o salário de {funcionario1.nome} é R${funcionario1.salario:.2f}")

gerente1 = Gerente("Rodrigo", 5000.0, "TI")
print(f"\nRelatório do gerente:")
gerente1.relatorio()

gerente1.aumentar_salario(15)
print(f"Salário atualizado do gerente {gerente1.nome}: R${gerente1.salario:.


class Funcionario:
    def _init_(self, nome):
        self.nome = nome

    def trabalhar(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Professor(Funcionario):
    def trabalhar(self):
        return f"O professor {self.nome} está dando aula."

class Cozinheiro(Funcionario):
    def trabalhar(self):
        return f"O cozinheiro {self.nome} está preparando uma refeição."


professor1 = Professor("João")
cozinheiro1 = Cozinheiro("Rafael")

print(professor1.trabalhar())class Funcionario:
    def _init_(self, nome):
        self.nome = nome

    def trabalhar(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Professor(Funcionario):
    def trabalhar(self):
        return f"O professor {self.nome} está dando aula."

class Cozinheiro(Funcionario):
    def trabalhar(self):
        return f"O cozinheiro {self.nome} está preparando uma refeição."


professor1 = Professor("João")
cozinheiro1 = Cozinheiro("Rafael")

print(professor1.trabalhar())
print(cozinheiro1.trabalhar())
print()

class Animal:
    def _init_(self, nome):
        self.nome = nome

    def emitir_som(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Cachorro(Animal):
    def emitir_som(self):
        return "Thor faz au au!"

class Gato(Animal):
    def emitir_som(self):
        return "Mingau faz miau!"

class Passaro(Animal):
    def emitir_som(self):
        return "Piuí faz piu piu!"

class Porco(Animal):
    def emitir_som(self):
        return "Fofinho faz oinc oinc!"

cachorro1 = Cachorro("Thor")
gato1 = Gato("Mingau")
passaro1 = Passaro("Piuí")
porco1 = Porco("Fofinho")

print(cachorro1.emitir_som())
print(gato1.emitir_som())
print(passaro1.emitir_som())
print(porco1.emitir_som())
print()

class Veiculo:
    def _init_(self, marca):
        self.marca = marca

    def acelerar(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Caminhao(Veiculo):
    def acelerar(self):
        return "Caminhão está acelerando."

class Carro(Veiculo):
    def acelerar(self):
        return "Carro está acelerando."

class Moto(Veiculo):
    def acelerar(self):
        return "Moto está acelerando."

caminhao1 = Caminhao("Mercedes")
carro1 = Carro("Ferrari")
moto1 = Moto("BMW")

print(caminhao1.acelerar())
print(carro1.acelerar())
print(moto1.acelerar())
print()
print(cozinheiro1.trabalhar())
print()

class Animal:
    def _init_(self, nome):
        self.nome = nome

    def emitir_som(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Cachorro(Animal):
    def emitir_som(self):
        return "Thor faz au au!"

class Gato(Animal):
    def emitir_som(self):
        return "Mingau faz miau!"

class Passaro(Animal):
    def emitir_som(self):
        return "Piuí faz piu piu!"

class Porco(Animal):
    def emitir_som(self):
        return "Fofinho faz oinc oinc!"

cachorro1 = Cachorro("Thor")
gato1 = Gato("Mingau")
passaro1 = Passaro("Piuí")
porco1 = Porco("Fofinho")

print(cachorro1.emitir_som())
print(gato1.emitir_som())
print(passaro1.emitir_som())
print(porco1.emitir_som())
print()

class Veiculo:
    def _init_(self, marca):
        self.marca = marca

    def acelerar(self):
        raise NotImplementedError("Método deve ser implementado nas classes filhas")

class Caminhao(Veiculo):
    def acelerar(self):
        return "Caminhão está acelerando."

class Carro(Veiculo):
    def acelerar(self):
        return "Carro está acelerando."

class Moto(Veiculo):
    def acelerar(self):
        return "Moto está acelerando."

caminhao1 = Caminhao("Mercedes")
carro1 = Carro("Ferrari")
moto1 = Moto("BMW")

print(caminhao1.acelerar())
print(carro1.acelerar())
print(moto1.acelerar())
print()